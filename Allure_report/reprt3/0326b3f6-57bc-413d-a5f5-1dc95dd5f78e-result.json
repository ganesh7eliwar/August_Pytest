{"name": "test_credence_login", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.SessionNotCreatedException: Message: session not created\nfrom no such execution context: loader has changed while resolving nodes\n  (Session info: chrome=115.0.5790.110)\nStacktrace:\nBacktrace:\n\tGetHandleVerifier [0x00007FF6F3813E62+57250]\n\t(No symbol) [0x00007FF6F378BC02]\n\t(No symbol) [0x00007FF6F365E0BB]\n\t(No symbol) [0x00007FF6F366162C]\n\t(No symbol) [0x00007FF6F3663A4F]\n\t(No symbol) [0x00007FF6F3663B40]\n\t(No symbol) [0x00007FF6F36BF6DA]\n\t(No symbol) [0x00007FF6F36BDD50]\n\t(No symbol) [0x00007FF6F36B6583]\n\t(No symbol) [0x00007FF6F368CC71]\n\t(No symbol) [0x00007FF6F368DE54]\n\tGetHandleVerifier [0x00007FF6F3AC4CF2+2879026]\n\tGetHandleVerifier [0x00007FF6F3B16F30+3215472]\n\tGetHandleVerifier [0x00007FF6F3B0FD4F+3186319]\n\tGetHandleVerifier [0x00007FF6F38A5505+652869]\n\t(No symbol) [0x00007FF6F3797518]\n\t(No symbol) [0x00007FF6F37935F4]\n\t(No symbol) [0x00007FF6F37936EC]\n\t(No symbol) [0x00007FF6F37838E3]\n\tBaseThreadInitThunk [0x00007FFF7BD57614+20]\n\tRtlUserThreadStart [0x00007FFF7C7426B1+33]", "trace": "self = <test_August_001.Test_Credence object at 0x00000201B32E84D0>\n\n    def test_credence_login(self):\n        # 1. Open Browser\n>       driver = webdriver.Chrome()\n\ntest_August_001.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv\\Lib\\site-packages\\selenium\\webdriver\\chrome\\webdriver.py:45: in __init__\n    super().__init__(\nvenv\\Lib\\site-packages\\selenium\\webdriver\\chromium\\webdriver.py:56: in __init__\n    super().__init__(\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:206: in __init__\n    self.start_session(capabilities)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:290: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000201B2772F50>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created\\\\nfrom no such execut...07FF6F37838E3]\\\\n\\\\tBaseThreadInitThunk [0x00007FFF7BD57614+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFF7C7426B1+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created\nE       from no such execution context: loader has changed while resolving nodes\nE         (Session info: chrome=115.0.5790.110)\nE       Stacktrace:\nE       Backtrace:\nE       \tGetHandleVerifier [0x00007FF6F3813E62+57250]\nE       \t(No symbol) [0x00007FF6F378BC02]\nE       \t(No symbol) [0x00007FF6F365E0BB]\nE       \t(No symbol) [0x00007FF6F366162C]\nE       \t(No symbol) [0x00007FF6F3663A4F]\nE       \t(No symbol) [0x00007FF6F3663B40]\nE       \t(No symbol) [0x00007FF6F36BF6DA]\nE       \t(No symbol) [0x00007FF6F36BDD50]\nE       \t(No symbol) [0x00007FF6F36B6583]\nE       \t(No symbol) [0x00007FF6F368CC71]\nE       \t(No symbol) [0x00007FF6F368DE54]\nE       \tGetHandleVerifier [0x00007FF6F3AC4CF2+2879026]\nE       \tGetHandleVerifier [0x00007FF6F3B16F30+3215472]\nE       \tGetHandleVerifier [0x00007FF6F3B0FD4F+3186319]\nE       \tGetHandleVerifier [0x00007FF6F38A5505+652869]\nE       \t(No symbol) [0x00007FF6F3797518]\nE       \t(No symbol) [0x00007FF6F37935F4]\nE       \t(No symbol) [0x00007FF6F37936EC]\nE       \t(No symbol) [0x00007FF6F37838E3]\nE       \tBaseThreadInitThunk [0x00007FFF7BD57614+20]\nE       \tRtlUserThreadStart [0x00007FFF7C7426B1+33]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: SessionNotCreatedException"}, "start": 1690966706568, "stop": 1690966723349, "uuid": "d1ffde14-44c9-4007-be59-f4bd79122f2b", "historyId": "a76cf2430ecb9d3f08e951f56a688f70", "testCaseId": "a76cf2430ecb9d3f08e951f56a688f70", "fullName": "test_August_001.Test_Credence#test_credence_login", "labels": [{"name": "suite", "value": "test_August_001"}, {"name": "subSuite", "value": "Test_Credence"}, {"name": "host", "value": "LAPTOP-1DT8TVKR"}, {"name": "thread", "value": "9608-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_August_001"}]}